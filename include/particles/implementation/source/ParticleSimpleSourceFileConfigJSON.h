/**
 * @file
 * @author University of Warwick
 * @version 1.0
 *
 * @section LICENSE
 *
 * @section DESCRIPTION
 *
 * Contains declarations for the ParticleSimpleSourceFileConfigJSON class
 */

#ifndef CUPCFD_PARTICLES_PARTICLE_SIMPLE_SOURCE_FILE_CONFIG_JSON_INCLUDE_H
#define CUPCFD_PARTICLES_PARTICLE_SIMPLE_SOURCE_FILE_CONFIG_JSON_INCLUDE_H

#include "ParticleSourceConfigSource.h"
#include "ParticleSimpleSourceFileConfig.h"
#include "ParticleSimple.h"

#include "Error.h"

// JsonCPP - Supplied as standalone in include/io/jsoncpp
#include "json.h"
#include "json-forwards.h"

#include <vector>

namespace cupcfd
{
	namespace particles
	{
		/**
		 * Defines a JSON access for configuring Particle data access from files.
		 *
		 * === Fields ===
		 *
		 * Required:
		 * Optional:
		 * None
		 *
		 */
		template <class I, class T>
		class ParticleSimpleSourceFileConfigJSON : public ParticleSourceConfigSource<ParticleSimple<I,T>,I,T>
		{
			public:
				// === Members ===

				/** Json Data Store containing fields for this JSON source **/
				Json::Value configData;

				// === Constructors/Deconstructors ===

				/**
				 * Parse the JSON record provided for values belonging to a VectorSourceFile entry
				 *
				 * @param parseJSON The contents of a JSON record with the appropriate fields
				 */
				ParticleSimpleSourceFileConfigJSON(Json::Value& parseJSON);

				/**
				 * Constructor:
				 * Copy values from source to this newly constructed object
				 *
				 * @tparam I The datatype of any indexing scheme used by the distribution
				 * @tparam T The datatype of the values generated by the distribution
				 */
				ParticleSimpleSourceFileConfigJSON(const ParticleSimpleSourceFileConfigJSON<I,T>& source);

				/**
				 * Deconstructor:
				 *
				 * @tparam I The datatype of any indexing scheme used by the distribution
				 * @tparam T The datatype of the values generated by the distribution
				 */
				virtual ~ParticleSimpleSourceFileConfigJSON();

				// === Overloaded Methods ===

				virtual cupcfd::error::eCodes getFilePath(std::string& filePath);
				virtual cupcfd::error::eCodes getFileFormat(ParticleSimpleFileFormat * format);
				virtual void operator=(const ParticleSimpleSourceFileConfigJSON<I,T>& source);
				virtual ParticleSimpleSourceFileConfigJSON<I,T> * clone();
				virtual cupcfd::error::eCodes buildParticleSourceConfig(ParticleSourceConfig<ParticleSimple<I,T>,I,T> ** config);
		};
	}
}

// Include Header Level Definitions
#include "ParticleSimpleSourceFileConfigJSON.ipp"

#endif
