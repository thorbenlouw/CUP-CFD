/**
 * @file
 * @author University of Warwick
 * @version 1.0
 *
 * @section LICENSE
 *
 * @section DESCRIPTION
 *
 * Description
 *
 * Contains declarations for the DistributionConfigNormal Class
 */

#ifndef CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_NORMAL_INCLUDE_H
#define CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_NORMAL_INCLUDE_H

// Error Codes
#include "Error.h"

// Base Class
#include "DistributionConfig.h"

namespace cupcfd
{
	namespace distributions
	{
		template <class I, class T>
		class DistributionConfigNormal : public DistributionConfig<I,T>
		{
			public:
				// === Members ===

				/** Range Lower Bound (Inclusive) **/
				T lbound;

				/** Range Upper Bound (Non-Inclusive) **/
				T ubound;

				/** Distribution Mean **/
				T mean;

				/** Distribution Standard Deviation **/
				T stdev;

				// === Constructors/Deconstructors ===

				/**
				 * Constructor:
				 * Initialises all values to zero.
				 */
				DistributionConfigNormal();

				/**
				 * Constructor:
				 * Initialises values to provided parameters.
				 *
				 * @param lbound The lower bound of the distribution range (inclusive)
				 * @param ubound The upper bound of the distribution range (non-inclusive)
				 * @param mean The mean of the distribution
				 * @param stdev The standard deviation of the distribution
				 */
				DistributionConfigNormal(T lbound, T ubound, T mean, T stdev);

				/**
				 * Constructor:
				 * Initialises all values to copies of values from
				 * another configuration.
				 */
				DistributionConfigNormal(DistributionConfigNormal<I, T>& source);

				/**
				 * Deconstructor:
				 * Currently does nothing.
				 */
				~DistributionConfigNormal();

				// === Concrete Methods ===

				/**
				 * Get the lower bound in the configuration.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return The lower bound value stored in the configuration.
				 */
				T getLBound();

				/**
				 * Set the lower bound stored in the configuration.
				 *
				 * @param lbound The lower bound value to set the configuration to.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return Nothing.
				 */
				void setLBound(T lbound);

				/**
				 * Get the upper bound in the configuration.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return The upper bound value stored in the configuration.
				 */
				T getUBound();

				/**
				 * Set the upper bound stored in the configuration.
				 *
				 * @param ubound The upper bound value to set the configuration to.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return Nothing.
				 */
				void setUBound(T ubound);

				/**
				 * Get the mean in the configuration.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return The mean value stored in the configuration.
				 */
				T getMean();

				/**
				 * Set the mean stored in the configuration.
				 *
				 * @param mean The meanvalue to set the configuration to.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return Nothing.
				 */
				void setMean(T mean);

				/**
				 * Get the standard deviation in the configuration.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return The standard deviation value stored in the configuration.
				 */
				T getStdev();

				/**
				 * Set the standard deviation stored in the configuration.
				 *
				 * @param ubound The standard deviation value to set the configuration to.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return Nothing.
				 */
				void setStdev(T stdev);


				// === Inherited Overloaded Methods ===

				void operator=(const DistributionConfigNormal<I,T>& source);
				DistributionConfigNormal<I,T> * clone();
				void buildDistribution(Distribution<I,T> ** dist);
		};
	}
}

// Include Header Level Definitions
#include "DistributionConfigNormal.ipp"

#endif
