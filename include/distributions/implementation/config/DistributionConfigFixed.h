/**
 * @file
 * @author University of Warwick
 * @version 1.0
 *
 * @section LICENSE
 *
 * @section DESCRIPTION
 *
 * Description
 *
 * Contains declarations for the DistributionConfigFixed Class
 */

#ifndef CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_FIXED_INCLUDE_H
#define CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_FIXED_INCLUDE_H

// Error Codes
#include "Error.h"

// Base Class
#include "DistributionConfig.h"

namespace cupcfd
{
	namespace distributions
	{
		template <class I, class T>
		class DistributionConfigFixed : public DistributionConfig<I,T>
		{
			public:
				// === Members ===

				/** Value that the fixed distribution should generate **/
				T fixedValue;

				// === Constructors/Deconstructors ===

				/**
				 * Constructor:
				 * Sets fixed value to zero.
				 */
				DistributionConfigFixed();

				/**
				 * Constructor:
				 * Initialises values to provided parameters.
				 *
				 * @param fixedValue The fixed value that the distribution should generate
				 */
				DistributionConfigFixed(T fixedValue);

				/**
				 * Constructor:
				 * Initialises all values to copies of values from
				 * another configuration.
				 */
				DistributionConfigFixed(DistributionConfigFixed<I, T>& source);

				/**
				 * Deconstructor:
				 * Currently does nothing.
				 */
				~DistributionConfigFixed();

				// === Concrete Methods ===

				/**
				 * Get the lower bound in the configuration.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return The lower bound value stored in the configuration.
				 */
				T getFixedValue();

				/**
				 * Set the lower bound stored in the configuration.
				 *
				 * @param lbound The lower bound value to set the configuration to.
				 *
				 * @tparam The data type of the values that might be generated by a distribution.
				 *
				 * @return Nothing.
				 */
				void setFixedValue(T fixedValue);


				// === Inherited Overloaded Methods ===

				void operator=(const DistributionConfigFixed<I,T>& source);
				DistributionConfigFixed<I,T> * clone();
				void buildDistribution(Distribution<I,T> ** dist);
		};
	}
}

// Include Header Level Definitions
#include "DistributionConfigFixed.ipp"

#endif
