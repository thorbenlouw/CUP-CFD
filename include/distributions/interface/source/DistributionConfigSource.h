/**
 * @file
 * @author University of Warwick
 * @version 1.0
 *
 * @section LICENSE
 *
 * @section DESCRIPTION
 *
 * Description
 *
 * Contains declarations for the DistributionConfig Class
 */

#ifndef CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_SOURCE_INCLUDE_H
#define CUPCFD_DISTRIBUTIONS_DISTRIBUTION_CONFIG_SOURCE_INCLUDE_H

// Error Codes
#include "Error.h"

// DistributionConfig (For Builder)
#include "DistributionConfig.h"

namespace cupcfd
{
	namespace distributions
	{
		/**
		 * General Interface for retrieving information from a Distribution config data
		 * source.
		 * Also acts as a base class for polymorphism.
		 *
		 * @tparam The datatype of any indexing scheme used by the distribution
		 * @tparam The datatype of the values generated by the distribution
		 */
		template <class I, class T>
		class DistributionConfigSource
		{
			public:
				// === Members ===

				// === Constructors/Deconstructors ===

				/**
				 * Default Constructor
				 *
				 * @tparam The datatype of any indexing scheme used by the distribution
				 * @tparam The datatype of the values generated by the distribution
				 */
				DistributionConfigSource();

				/**
				 * Constructor:
				 * Copy values from source to this newly constructed object
				 *
				 * @tparam The datatype of any indexing scheme used by the distribution
				 * @tparam The datatype of the values generated by the distribution
				 */
				// DistributionConfigSource(const DistributionConfigSource<I,T>& source);

				/**
				 * Deconstructor:
				 *
				 * @tparam The datatype of any indexing scheme used by the distribution
				 * @tparam The datatype of the values generated by the distribution
				 */
				virtual ~DistributionConfigSource();

				// === Pure Virtual Methods ===

				/**
				 * Creates a new object containing a copy of the contents of this object
				 *
				 * @tparam The datatype of any indexing scheme used by the distribution
				 * @tparam The datatype of the values generated by the distribution
				 *
				 * @return A pointer to the newly created clone of this object.
				 */
				virtual DistributionConfigSource<I,T> * clone() = 0;

				/**
				 * Build a distribution configuration object
				 *
				 * @param dist A pointer to the location where the pointer to the newly created
				 * distribution will be stored.
				 *
				 * @tparam The datatype of any indexing scheme used by the distribution
				 * @tparam The datatype of the values generated by the distribution
				 *
				 * @return An error status indicating the success or failure of the operation
				 * @retval cupcfd::error::E_SUCCESS Success
				 */
				virtual cupcfd::error::eCodes buildDistributionConfig(DistributionConfig<I,T> ** distConfig) = 0;
		};
	}
}

// Include Header Level Definitions
#include "DistributionConfigSource.ipp"

#endif
